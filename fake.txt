import cv2
import numpy as np
import mediapipe as mp
import time
import textwrap
from math import hypot

# Initialize MediaPipe Face Mesh
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

# Virtual keyboard configuration
keyboard = np.zeros((600, 1200, 3), np.uint8)
key_width, key_height = 100, 100
cols = 12
keys_set_1 = {
    0: "1", 1: "2", 2: "3", 3: "4", 4: "5", 5: "6", 6: "7", 7: "8", 8: "9", 9: "0",
    10: "Q", 11: "W", 12: "E", 13: "R", 14: "T", 15: "Y", 16: "U", 17: "I", 18: "O", 19: "P",
    20: "A", 21: "S", 22: "D", 23: "F", 24: "G", 25: "H", 26: "J", 27: "K", 28: "L", 29: ";",
    30: "Z", 31: "X", 32: "C", 33: "V", 34: "B", 35: "N", 36: "M", 37: ",", 38: ".", 39: "/",
    40: "-", 41: "=", 42: "[", 43: "]", 44: "\\", 45: "'", 46: "`", 47: "!", 48: "@", 49: "#",
    50: "$", 51: "%", 52: "^", 53: "&", 54: "*", 55: "(", 56: ")", 57: "_", 58: "+", 59: "~"
}

# Text board configuration
board_width = 1000
board_height = 500
board = np.zeros((board_height, board_width), np.uint8)
board[:] = 255

# Function to draw a key on the virtual keyboard
def letter(letter_index, text, letter_light):
    x = (letter_index % cols) * key_width
    y = (letter_index // cols) * key_height
    th = 2

    if letter_light:
        cv2.rectangle(keyboard, (x + th, y + th), (x + key_width - th, y + key_height - th), (255, 255, 255), -1)  # White fill
    else:
        cv2.rectangle(keyboard, (x + th, y + th), (x + key_width - th, y + key_height - th), (255, 0, 0), th)  # Red border

    font_letter = cv2.FONT_HERSHEY_PLAIN
    font_scale = 3.5
    font_th = 2
    text_size = cv2.getTextSize(text, font_letter, font_scale, font_th)[0]

    text_x = x + (key_width - text_size[0]) // 2
    text_y = y + (key_height + text_size[1]) // 2

    cv2.putText(keyboard, text, (text_x, text_y), font_letter, font_scale, (255, 0, 0), font_th)

# Function to calculate the midpoint between two points
def midpoint(p1, p2):
    return ((p1[0] + p2[0]) // 2, (p1[1] + p2[1]) // 2)

# Function to calculate the blinking ratio
def get_blinking_ratio(eye_landmarks):
    left_point = eye_landmarks[0]
    right_point = eye_landmarks[3]

    center_top = midpoint(eye_landmarks[1], eye_landmarks[2])
    center_bottom = midpoint(eye_landmarks[4], eye_landmarks[5])

    hor_line_length = hypot(left_point[0] - right_point[0], left_point[1] - right_point[1])
    ver_line_length = hypot(center_top[0] - center_bottom[0], center_top[1] - center_bottom[1])

    return hor_line_length / ver_line_length

# Variables to control text input
letter_index = 0
blinking_frames = 0
text = ""
blinking_threshold = 4.25  # Default blinking ratio threshold
frames_to_trigger = 5  # Frames required for a valid blink
key_switch_interval = 3  # Interval in seconds to switch keys

start_time = time.time()

cap = cv2.VideoCapture(0)  # Initialize webcam
with mp_face_mesh.FaceMesh(
    static_image_mode=False,
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5,
) as face_mesh:
    while True:
        ret, frame = cap.read()  # Capture webcam frame
        if not ret:
            break
        frame = cv2.resize(frame, None, fx=0.5, fy=0.5)  # Resize for performance
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
        
        # Reset keyboard and draw keys
        keyboard[:] = (0, 0, 0)
        
        # Switch keys every key_switch_interval seconds
        if time.time() - start_time >= key_switch_interval:
            letter_index += 1
            if letter_index >= len(keys_set_1):
                letter_index = 0
            start_time = time.time()  # Reset timer
        
        # Draw the keys and highlight the current one
        for i in range(len(keys_set_1)):
            letter(i, keys_set_1[i], i == letter_index)
        
        # Process the frame with MediaPipe Face Mesh
        results = face_mesh.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        
        if results.multi_face_landmarks:
            for face_landmarks in results.multi_face_landmarks:
                # Draw facial landmarks to verify
                mp_drawing.draw_landmarks(
                    frame,
                    face_landmarks,
                    mp_face_mesh.FACEMESH_CONTOURS,
                    mp_drawing_styles.get_default_face_mesh_contours_style(),
                    mp_drawing_styles.get_default_face_mesh_tesselation_style(),
                )

                # Get landmark coordinates
                landmarks = [(lm.x * frame.shape[1], lm.y * frame.shape[0])
                             for lm in face_landmarks.landmark]

                # Get the left and right eye landmarks
                left_eye_landmarks = [landmarks[i] for i in [33, 159, 158, 133, 153, 144]]
                right_eye_landmarks = [landmarks[i] for i in [362, 386, 387, 263, 373, 380]]
                
                # Calculate the blinking ratio for both eyes
                left_eye_ratio = get_blinking_ratio(left_eye_landmarks)
                right_eye_ratio = get_blinking_ratio(right_eye_landmarks)

                blinking_ratio = (left_eye_ratio + right_eye_ratio) / 2
                
                # Display the calculated blinking ratio for debugging
                cv2.putText(frame, f"Blinking Ratio: {blinking_ratio:.2f}", (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

                # Blinking detection
                if blinking_ratio > blinking_threshold:
                    cv2.putText(frame, "BLINKING", (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 3)  # Display "BLINKING"
                    blinking_frames += 1
                    
                    if blinking_frames >= frames_to_trigger:  # Consistent blink detected
                        text += keys_set_1[letter_index]  # Add letter to text
                        blinking_frames = 0  # Reset the blink counter

                else:
                    blinking_frames = 0  # Reset the blink counter if not blinking
        
        # Display the text on the board
        max_chars_per_line = 40  # Maximum characters per line
        lines = textwrap.wrap(text, max_chars_per_line)  # Wrap text for multiple lines
        
        # Resize the board if needed
        new_board_height = len(lines) * 60
        if new_board_height > board_height:
            board_height = new_board_height
            board = np.zeros((board_height, board_width), np.uint8)
            board[:] = 255
        
        # Draw the text on the board
        for i, line in enumerate(lines):
            cv2.putText(board, line, (10, 60 * (i + 1)), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 3)

        # Display the frames
        cv2.imshow("Webcam Frame", frame)  # Main webcam frame
        cv2.imshow("Virtual Keyboard", keyboard)  # Virtual keyboard
        cv2.imshow("Text Board", board)  # Text board with input

        # Exit on ESC key
        if cv2.waitKey(10) & 0xFF == 27:  # ESC key
            break

# Release resources
cap.release()
cv2.destroyAllWindows()
